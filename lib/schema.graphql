"""
Types
"""
type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String @deprecated
  people: [Student]
  level: Level
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

union GenericEntity = Course | Student | Monitor

"""
Interfaces
"""
interface Person {
  _id: ID!
  name: String!
  email: String!
}

"""
Inputs
"""
input PersonInput {
  name: String!
  email: String!
  avatar: String
  phone: String
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

"""
Enums
"""
enum Level {
  junior
  medium
  senior
}

enum TypeKey {
  student
  monitor
  course
}

"""
Queries
"""
type Query {
  "Devuelve todos cursos"
  getCourses: [Course]

  "Devuelve un curso"
  getCourse(id: ID!): Course

  "return all persons"
  getPeople: [Person]

  "return a person"
  getPerson(id: ID!): Person

  "return a entity"
  getEntity(key: TypeKey!): [GenericEntity]
}

"""
Mutations
"""
type Mutation {
  "Crea un curso"
  createCourse(input: CourseInput!): Course

  "Create a person"
  createPerson(input: PersonInput!): Person

  "Update a person by _id"
  updatePerson(id: ID!, entity: PersonInput!): Person

  "Add a person to course"
  addPeopleToCourse(courseID: ID!, personID: ID!): Course
}
